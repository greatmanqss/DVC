#include <vector>

#include "caffe/layers/lgd_loss_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {
 
template <typename Dtype>
void LgdLossLayer<Dtype>::Reshape(
  const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) {
  LossLayer<Dtype>::Reshape(bottom, top);
  CHECK_EQ(bottom[0]->num(), bottom[1]->num())
      << "Inputs must have the same dimension.";
  diff_.Reshape(1,bottom[0]->channels(),bottom[0]->height(),bottom[0]->width());
  //realLoss_.Reshape(bottom[0]->num(),bottom[0]->num(),1,1);
}

template <typename Dtype>
void LgdLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
  const int count = bottom[0]->count()/bottom[0]->num();
  const Dtype alpha = 2*top[0]->cpu_diff()[0] / bottom[0]->num()/(bottom[0]->num()-1);
  caffe_set(bottom[0]->count(),Dtype(0.),bottom[0]->mutable_cpu_diff());
  //caffe_set(diff_.count(),Dtype(0.),diff_.mutable_cpu_data());
  //caffe_set(realLoss_.count(),Dtype(0.),realLoss_.mutable_cpu_data());
  Dtype loss = 0.;
  for(int i = 0; i < bottom[0]->num(); i++) {
	  int offset_a = bottom[0]->offset(i);
	  for(int j = i+1; j < bottom[0]->num(); j++) {
		  int offset_b = bottom[0]->offset(j);
		  
		  caffe_sub(
          count,
          bottom[0]->cpu_data()+offset_a,
          bottom[0]->cpu_data()+offset_b,
          diff_.mutable_cpu_data());
          Dtype dot = caffe_cpu_dot(count, diff_.cpu_data(), diff_.cpu_data());
		  dot = dot - bottom[1]->cpu_data()[i*bottom[0]->num()+j];
		  loss += abs(dot);
		  
		  
		  Dtype sign = (dot >= 0) ? 1 : -1;
		  caffe_cpu_axpby(
			count,
			alpha*sign,
			diff_.cpu_data(),
			Dtype(1.),
			bottom[0]->mutable_cpu_diff()+offset_a);
			
		  caffe_cpu_axpby(
			count,
			-alpha*sign,
			diff_.cpu_data(),
			Dtype(1.),
			bottom[0]->mutable_cpu_diff()+offset_b);	
	  }
  }
  
  loss = loss / bottom[0]->num() / (bottom[0]->num()-1);
  top[0]->mutable_cpu_data()[0] = loss;
}

template <typename Dtype>
void LgdLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
    const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
	if (propagate_down[1]) {
    LOG(FATAL) << this->type()
               << " Layer cannot backpropagate to label inputs.";
    }	
}

#ifdef CPU_ONLY
STUB_GPU(LgdLossLayer);
#endif

INSTANTIATE_CLASS(LgdLossLayer);
REGISTER_LAYER_CLASS(LgdLoss);

}  // namespace caffe
